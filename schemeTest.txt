(define double (lambda (x) (* 2 x)))
(define powof2 (lambda (x) (if (<= x 2) (= (modulo x 2) 0) (if (odd? x) #f (powof2 (/ x 2))))))
(define sum (lambda (l) (if (pair? l) ( + (car l) (sum (cdr l))) 0 )))
(define applyToList (lambda (f l) (if (pair? l) (cons (f (car l)) (applyToList f (cdr l))) '())))
